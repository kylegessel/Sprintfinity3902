Reviewed Class: 
KeyboardManager

Written by: 
Ben Hobson

Reviewed by:
Casey VanCauwenbergh


One of the first things I noticed about the Keyboard Manager class is the
length. It may be nice to seperate some of the content into another class to 
help keep the overal length a little shorter. Though I believe some of the 
current content is only needed for Sprint 2 and will be removed in later 
sprints. 

Some things that I think are done well in terms of maintanability is the use of
multiple dictionarys. If Commands or inputs need to be changed in the future,
they will only need to be added in the dictionary and everything else should
continue to function without problems. Furthermore, every key is initialized 
with a do nothing command and then is overridden if that key needs to trigger a
different command. While this may call a few extra commands, it makes changes 
easy. To add or remove a new command and key, it can be done in one new line or
simply by removing one line. 

One thing I noticed that could be improved upon is the class has tight coupling.
For example, in the Initialize method, the RegisterKeyUpCallBack call depends on
The State, Sprite, and Animation Classes. If there is a change in any of those
classes it may result in having to change this class as well.



Uses Interfaces.ICommand multiple times. I don't think the Interfaces word is necessary
Singleton. I think this is good

Initialize method:
RegisterKeyUpCallback has tight coupling. Dependent on State, sprite and animation objects!

